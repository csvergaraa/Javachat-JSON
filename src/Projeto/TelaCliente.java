/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Projeto;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONObject;

/**
 *
 * @author Cesar
 * Janela do cliente, é aberta quando a Janela do Login funciona 
 */
public class TelaCliente extends javax.swing.JFrame {

    SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss a");
    String username;
    String host;
    String tipo;
    String itens;
    String descricao;
    String ocupado;
    int port;
    Socket socket;
    static PrintStream envia;
    BufferedReader recebe;
    Cliente clientThread;
    Vector listaClientes;
    DefaultTableModel dtm;

    private boolean isConnected = false;

    /**
     * Creates new form TelaCliente
     */
    public TelaCliente() {
        initComponents();
    }

    public void initFrame(String username, String host, int port, String tipo, String itens, String descricao) {
        this.username = username;
        this.host = host;
        this.port = port;
        this.tipo = tipo;
        this.itens = itens;
        this.descricao = descricao;
        this.ocupado = "nao";
        setTitle("Você está LOGADO como: " + username);
        dtm = (DefaultTableModel) jTable1.getModel();
        jButton4.disable();

        try {
            socket = new Socket(host, port);
            envia = new PrintStream(socket.getOutputStream());
            recebe = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            JSONObject my_obj = new JSONObject();
            my_obj.put("action", "connect");
            my_obj.put("nome", this.username);
            my_obj.put("tipo", this.tipo);
            my_obj.put("material", this.itens);
            if (this.descricao.equals("")) {
                // nada acontece
            } else {
                my_obj.put("descricao", this.descricao);
            } 
            String json_string = my_obj.toString();
            System.out.println("Protocolo Enviado:" + json_string.trim());
            envia.println(json_string);
            new Thread(new Cliente(socket, this)).start();
        } catch (IOException e) {
            isConnected = false;
            JOptionPane.showMessageDialog(this, "Não possível conectar-se ao SERVIDOR, tente mais tarde!", "Falha na Conexão", JOptionPane.ERROR_MESSAGE);
            System.exit(0);

        }
    }

    public boolean isConnected() {
        return this.isConnected;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tipoEnvio = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        enviarTipo = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jUnicast = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setNextFocusableComponent(jTextArea3);

        jLabel1.setText("Chat Global");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Desconectar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Tipo", "Material", "Porta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel3.setText("Usuarios Online:");

        jButton3.setText("Enviar Mensagem ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextArea3.setNextFocusableComponent(jButton3);
        jScrollPane4.setViewportView(jTextArea3);

        tipoEnvio.add(jRadioButton2);
        jRadioButton2.setText("Enviar para Todos");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Digite aqui sua mensagem:");

        tipoEnvio.add(enviarTipo);
        enviarTipo.setText("Enviar por Tipo");
        enviarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarTipoActionPerformed(evt);
            }
        });

        tipoEnvio.add(jRadioButton3);
        jRadioButton3.setText("Enviar por Unicast");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jTabbedPane1.addTab("Multicast", jScrollPane3);

        jUnicast.setColumns(20);
        jUnicast.setRows(5);
        jScrollPane5.setViewportView(jUnicast);

        jTabbedPane1.addTab("Unicast", jScrollPane5);

        jButton1.setText("Solicitar Unicast");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Desconectar Unicast");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jRadioButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(enviarTipo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioButton2)
                            .addComponent(enviarTipo)
                            .addComponent(jRadioButton3))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton1)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        if (!(this.ocupado.equals("nao"))) {
            desconectarUnicast(this.ocupado); // desconectar do Unicast
        }
            
        JSONObject my_obj = new JSONObject();
        my_obj.put("action", "disconnect");

        String json_string = my_obj.toString();
        System.out.println("Protocolo Enviado:" + json_string.trim());
        envia.println(json_string); // TODO add your handling code here:
        this.setVisible(false);
        try {
            System.exit(0);
            socket.close();

        } catch (IOException ex) {
            Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void enviarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarTipoActionPerformed

    }//GEN-LAST:event_enviarTipoActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed

    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int cliente;
        
        try {        
            if(jRadioButton3.isSelected() == true) {
                if (!(this.ocupado.equals("nao"))) {
                    enviarUnicastServidor(jTextArea3.getText(), this.ocupado);
                    acrescentarUnicastMensagem("Voce enviou no (Unicast): " + jTextArea3.getText());

                } else {
                    JOptionPane.showMessageDialog(this, "Não foi possível mandar a mensagem, voce nao esta conectado com ninguem!", "Falha na Mensagem", JOptionPane.ERROR_MESSAGE);
                }
            } else if(enviarTipo.isSelected() == true) {
                String tipoDestino = this.tipo;
                enviaTipoServidor(jTextArea3.getText(), tipoDestino);
                acrescentarMulticastMensagem("Voce enviou para pessoas do material (" + tipoDestino + "): " + jTextArea3.getText() );
            } else if(jRadioButton2.isSelected() == true) {
                acrescentarMensagem("Voce enviou para todos: " + jTextArea3.getText());
                enviaMensagemServidor(jTextArea3.getText());
            }
            jTextArea3.setText("");
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            int confirma = JOptionPane.showConfirmDialog(null, "DESCONECTAR DO SISTEMA?");
            if (confirma == 0) {

                if (!(this.ocupado.equals("nao"))) {
                        desconectarUnicast(this.ocupado); // desconectar do Unicast
                }

                JSONObject my_obj = new JSONObject();
                my_obj.put("action", "disconnect");

                String json_string = my_obj.toString();
                System.out.println("Protocolo Enviado:" + json_string.trim());
                envia.println(json_string); // TODO add your handling code here:
                this.setVisible(false);
                try {
                    System.exit(0);
                    socket.close();

                } catch (IOException ex) {
                    Logger.getLogger(TelaCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try {
            if (jTable1.getSelectedRow() != -1) {
                String nomeDestino = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                String portaDestino = (String) jTable1.getValueAt(jTable1.getSelectedRow(), 3);
                solicitarUnicast(portaDestino); // solicitar Unicast para uma pessoa
                acrescentarUnicastMensagem("Voce solicitou Unicast para: " + nomeDestino);
            } else {
                JOptionPane.showMessageDialog(this, "Não foi possível solicitar Unicast, selecione algum usuario!", "Falha na solicitacao", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            
            
        try {
            int confirma = JOptionPane.showConfirmDialog(null, "DESCONECTAR DO UNICAST?");
            if (confirma == 0) {
                if (!(this.ocupado.equals("nao"))) {
                    desconectarUnicast(this.ocupado); // desconectar do Unicast
                    jTextArea3.setText("");
                    acrescentarUnicastMensagem("Você se desconectou do Unicast.");
                    desativarBotaoDesconexao();
                } else {
                    JOptionPane.showMessageDialog(this, "Não foi possível desconectar Unicast, voce nao se encontra em um chat Unicast.", "Falha na solicitacao", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_jButton4ActionPerformed
   
    public void ativarBotaoDesconexao() {
        jButton4.enable();
    }
    
    public void desativarBotaoDesconexao() {
        jButton4.disable();
    }
    
    public void conectouUnicast(Usuario cliente) {
        try {
            jUnicast.setText("");
            acrescentarUnicastMensagem("Conectado com sucesso na conversa com " + cliente.getNome() + " (UNICAST).");
        } catch (Exception e) {

        }
    }
    
    public void naoAceitouUnicast(Usuario cliente) {
        try {
            acrescentarUnicastMensagem(cliente.getNome() + " recusou sua solicitação (UNICAST).");
        } catch (Exception e) {

        }
    }
    
    public void desconectouUnicast() {
        try {
            acrescentarUnicastMensagem("O seu parceiro se desconectou da conversa, voce sera desconectado desta conversa (UNICAST).");
        } catch (Exception e) {

        }
    }
    
    public void acrescentarMensagem(String msg) {
       
        try {
            Date date = new Date();
            jTextArea1.append(sdf.format(date) + ": " + msg + "\n");
            jTextArea1.setCaretPosition(jTextArea1.getText().length() - 1);
        } catch (Exception e) {

        }
    }
   
   public void acrescentarMulticastMensagem(String msg) {
      
        try {
            jTabbedPane1.setSelectedIndex(0);
            Date date = new Date();
            jTextArea2.append(sdf.format(date) + ": " + msg + "\n");
            jTextArea2.setCaretPosition(jTextArea2.getText().length() - 1);
        } catch (Exception e) {

        }
    }
   
   public void acrescentarUnicastMensagem(String msg) {
       
        try {
            jTabbedPane1.setSelectedIndex(1);
            Date date = new Date();
            jUnicast.append(sdf.format(date) + ": " + msg + "\n");
            jUnicast.setCaretPosition(jUnicast.getText().length() - 1);
        } catch (Exception e) {

        }
   }
 
    public void enviaMensagemServidor(String mensagem) {
        
        try {
            if(mensagem != null) {
                JSONObject my_obj = new JSONObject();
                my_obj.put("action", "chat_general_server");
                my_obj.put("mensagem", mensagem);
                String json_string = my_obj.toString();
                System.out.println("Protocolo Enviado:" + json_string.trim());
                envia.println(json_string);
            }
        } catch (Exception e) {

        }
    }
    
    public void enviarUnicastServidor(String mensagem, String porta) {
        
        try {
            if(porta.equals("") == false) {
                JSONObject objetoJSON = new JSONObject();
                objetoJSON.put("action", "chat_unicast_message_server");
                objetoJSON.put("destinatario", porta);
                objetoJSON.put("mensagem", mensagem);
                String palavraJSON = objetoJSON.toString();
                System.out.println("Protocolo Enviado:" + palavraJSON.trim());
                envia.println(palavraJSON);
            }
        } catch (Exception e) {

        }
        
    }
    
    public void enviaTipoServidor(String mensagem, String tipo) {
        
        try {
            if(tipo.equals("") == false) {
                JSONObject objetoJSON = new JSONObject();
                objetoJSON.put("action", "chat_room_server");
                objetoJSON.put("mensagem", mensagem);
                String palavraJSON = objetoJSON.toString();
                System.out.println("Protocolo Enviado:" + palavraJSON.trim());
                envia.println(palavraJSON);
            }
        } catch (Exception e) {

        }
        
    }
    
    public void enviarServer(String palavraJSON) {
        
        try {
            if (palavraJSON != null) {
                System.out.println("Protocolo Enviado:" + palavraJSON.trim());
                envia.println(palavraJSON);
            }
        } catch (Exception e) {

        }
        
    }
    
    public void solicitarUnicast(String porta) {
        
        try {
            if (porta != null) {
                JSONObject objetoJSON = new JSONObject();
                objetoJSON.put("action", "chat_request_server");
                objetoJSON.put("destinatario", porta);
                String palavraJSON = objetoJSON.toString();
                System.out.println("Protocolo Enviado:" + palavraJSON.trim());
                envia.println(palavraJSON);
            }
        } catch (Exception e) {

        }
    }
    
    public void desconectarUnicast(String porta) {
        
        try {
            if (porta != null) {
                JSONObject objetoJSON = new JSONObject();
                objetoJSON.put("action", "chat_unicast_close_server");
                objetoJSON.put("destinatario", porta);
                String palavraJSON = objetoJSON.toString();
                System.out.println("Protocolo Enviado:" + palavraJSON.trim());
                this.ocupado = "nao";
                envia.println(palavraJSON);
            }
        } catch (Exception e) {

        }
    }

    public void atualizarTabelaOnline(Vector <Usuario> listaCliente) {
        
        try {
            javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) jTable1.getModel();
            dtm.fireTableDataChanged();
            dtm.setRowCount(0);

            for (int i = 0; i < listaCliente.size(); i++) {

                Usuario n = (Usuario) listaCliente.get(i);
                String[] linha = {n.getNome(), n.getTipo(), n.getMaterial(), n.getPorta()};
                dtm.addRow(linha);
            }
        } catch (Exception e) {

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton enviarTipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jUnicast;
    private javax.swing.ButtonGroup tipoEnvio;
    // End of variables declaration//GEN-END:variables

}
